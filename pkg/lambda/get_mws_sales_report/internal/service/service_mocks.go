// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPersistFile is a mock of PersistFile interface
type MockPersistFile struct {
	ctrl     *gomock.Controller
	recorder *MockPersistFileMockRecorder
}

// MockPersistFileMockRecorder is the mock recorder for MockPersistFile
type MockPersistFileMockRecorder struct {
	mock *MockPersistFile
}

// NewMockPersistFile creates a new mock instance
func NewMockPersistFile(ctrl *gomock.Controller) *MockPersistFile {
	mock := &MockPersistFile{ctrl: ctrl}
	mock.recorder = &MockPersistFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPersistFile) EXPECT() *MockPersistFileMockRecorder {
	return m.recorder
}

// PersistFilePayload mocks base method
func (m *MockPersistFile) PersistFilePayload(ctx context.Context, fileName string, payload []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistFilePayload", ctx, fileName, payload)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PersistFilePayload indicates an expected call of PersistFilePayload
func (mr *MockPersistFileMockRecorder) PersistFilePayload(ctx, fileName, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistFilePayload", reflect.TypeOf((*MockPersistFile)(nil).PersistFilePayload), ctx, fileName, payload)
}
