// Code generated by MockGen. DO NOT EDIT.
// Source: mws.go

// Package mws is a generated GoMock package.
package mws

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMWSAPI is a mock of MWSAPI interface
type MockMWSAPI struct {
	ctrl     *gomock.Controller
	recorder *MockMWSAPIMockRecorder
}

// MockMWSAPIMockRecorder is the mock recorder for MockMWSAPI
type MockMWSAPIMockRecorder struct {
	mock *MockMWSAPI
}

// NewMockMWSAPI creates a new mock instance
func NewMockMWSAPI(ctrl *gomock.Controller) *MockMWSAPI {
	mock := &MockMWSAPI{ctrl: ctrl}
	mock.recorder = &MockMWSAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMWSAPI) EXPECT() *MockMWSAPIMockRecorder {
	return m.recorder
}

// genSignAndFetch mocks base method
func (m *MockMWSAPI) genSignAndFetch(Action, ActionPath string, Parameters map[string]string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "genSignAndFetch", Action, ActionPath, Parameters)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// genSignAndFetch indicates an expected call of genSignAndFetch
func (mr *MockMWSAPIMockRecorder) genSignAndFetch(Action, ActionPath, Parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "genSignAndFetch", reflect.TypeOf((*MockMWSAPI)(nil).genSignAndFetch), Action, ActionPath, Parameters)
}

// GetLowestOfferListingsForASIN mocks base method
func (m *MockMWSAPI) GetLowestOfferListingsForASIN(items []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLowestOfferListingsForASIN", items)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLowestOfferListingsForASIN indicates an expected call of GetLowestOfferListingsForASIN
func (mr *MockMWSAPIMockRecorder) GetLowestOfferListingsForASIN(items interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLowestOfferListingsForASIN", reflect.TypeOf((*MockMWSAPI)(nil).GetLowestOfferListingsForASIN), items)
}

// GetLowestOfferListingsForSKU mocks base method
func (m *MockMWSAPI) GetLowestOfferListingsForSKU(items []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLowestOfferListingsForSKU", items)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLowestOfferListingsForSKU indicates an expected call of GetLowestOfferListingsForSKU
func (mr *MockMWSAPIMockRecorder) GetLowestOfferListingsForSKU(items interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLowestOfferListingsForSKU", reflect.TypeOf((*MockMWSAPI)(nil).GetLowestOfferListingsForSKU), items)
}

// GetCompetitivePricingForASIN mocks base method
func (m *MockMWSAPI) GetCompetitivePricingForASIN(items []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompetitivePricingForASIN", items)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompetitivePricingForASIN indicates an expected call of GetCompetitivePricingForASIN
func (mr *MockMWSAPIMockRecorder) GetCompetitivePricingForASIN(items interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompetitivePricingForASIN", reflect.TypeOf((*MockMWSAPI)(nil).GetCompetitivePricingForASIN), items)
}

// GetLowestPricedOffersForSKU mocks base method
func (m *MockMWSAPI) GetLowestPricedOffersForSKU(sku string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLowestPricedOffersForSKU", sku)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLowestPricedOffersForSKU indicates an expected call of GetLowestPricedOffersForSKU
func (mr *MockMWSAPIMockRecorder) GetLowestPricedOffersForSKU(sku interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLowestPricedOffersForSKU", reflect.TypeOf((*MockMWSAPI)(nil).GetLowestPricedOffersForSKU), sku)
}

// GetMatchingProductForId mocks base method
func (m *MockMWSAPI) GetMatchingProductForId(idType string, idList []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchingProductForId", idType, idList)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMatchingProductForId indicates an expected call of GetMatchingProductForId
func (mr *MockMWSAPIMockRecorder) GetMatchingProductForId(idType, idList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchingProductForId", reflect.TypeOf((*MockMWSAPI)(nil).GetMatchingProductForId), idType, idList)
}

// SubmitFeed mocks base method
func (m *MockMWSAPI) SubmitFeed(feedType, feed string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitFeed", feedType, feed)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitFeed indicates an expected call of SubmitFeed
func (mr *MockMWSAPIMockRecorder) SubmitFeed(feedType, feed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitFeed", reflect.TypeOf((*MockMWSAPI)(nil).SubmitFeed), feedType, feed)
}

// RequestReport mocks base method
func (m *MockMWSAPI) RequestReport(reportType string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestReport", reportType)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestReport indicates an expected call of RequestReport
func (mr *MockMWSAPIMockRecorder) RequestReport(reportType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestReport", reflect.TypeOf((*MockMWSAPI)(nil).RequestReport), reportType)
}

// GetReportRequestList mocks base method
func (m *MockMWSAPI) GetReportRequestList(reportRequestId string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReportRequestList", reportRequestId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReportRequestList indicates an expected call of GetReportRequestList
func (mr *MockMWSAPIMockRecorder) GetReportRequestList(reportRequestId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReportRequestList", reflect.TypeOf((*MockMWSAPI)(nil).GetReportRequestList), reportRequestId)
}

// GetReport mocks base method
func (m *MockMWSAPI) GetReport(generatedReportId string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReport", generatedReportId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReport indicates an expected call of GetReport
func (mr *MockMWSAPIMockRecorder) GetReport(generatedReportId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReport", reflect.TypeOf((*MockMWSAPI)(nil).GetReport), generatedReportId)
}
